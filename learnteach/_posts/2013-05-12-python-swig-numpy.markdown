---
layout: post
title: Python wrapping using SWIG and NumPy
---

I recently learned how to use SWIG to wrap C++ code with Python, along with
NumPy. Here are some of the existing resources for learning how to do this:

1. SWIG [documentation][swig]
2. NumPy SWIG interface file [documentation][numpyswig]
3. [Using CMake to build libraries generated by SWIG][cmakeswig]

I'm going to make this example as concrete and specific as possible.

---

# The given C++ library

We assume that we already have a C++ library that we want to wrap. That is, we
have the library's header files and shared libraries. We'll imagine that we're
trying to wrap part of a graphics library in which we can construct primitive
shapes. I make no claim that this is the right way to write a graphics library.

Suppose we have our own Vector class used to specify positions, etc., and a
Matrix class used to specify [rotation matrices][rotmat].

##### Vector.h
{% highlight c++ %}
template<class T> class Vector
{
};
{% endhighlight %}

##### Shape.h
{% highlight c++ %}
class Shape
{
public:
    virtual void setOrientation();
    virtual void setPosition();
    virtual void draw() = 0;
};
{% endhighlight %}

Sphere.h
{% highlight c++ %}
class Sphere : public Shape
{
public:
    void draw();
};
{% endhighlight %}


Shape.cpp
{% highlight c++ %}
Shape::setPosition(
{% endhighlight %}

hello

# Setting up a SWIG target in CMake

# Creating an interface file

# Using typemaps

# Using NumPy arrays for input and output

{% highlight python %}
s = "Python syntax highlighting"
print s
{% endhighlight %}

[swig]: http://www.swig.org/Doc2.0/SWIGDocumentation.html
[numpyswig]: http://docs.scipy.org/doc/numpy/reference/swig.interface-file.html
[cmakeswig]: http://www.cmake.org/Wiki/CMake_FAQ#How_do_I_use_CMake_to_generate_SWIG_wrapper_libraries.3F
[rotmat]: http://en.wikipedia.org/wiki/Rotation_matrix
